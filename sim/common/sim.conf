#!/bin/bash

# Common simulation setup script that sets Xilinx simulation library paths,
# important environment variables, tool locations, etc.  Should be sourced at the
# beginning of any simulation script. Can (and should) be overriden by
# individual simulation scripts when necessary.

# Prints a user-provided error message to stderr
err() {
    local msg
    msg="${1}"
    printf 'Error: %s\n' "${msg}" >&2
}

# Returns zero if ModelSim executables are found in the current PATH, else non-zero
check_modelsim() {
    command -v vlib >/dev/null 2>&1 || return 1
    command -v vsim >/dev/null 2>&1 || return 1
    command -v vlog >/dev/null 2>&1 || return 1
    command -v vcom >/dev/null 2>&1 || return 1
    command -v vopt >/dev/null 2>&1 || return 1
}

# Returns zero if Vivado is found in the current PATH, else non-zero
check_vivado() {
    command -v vivado >/dev/null 2>&1 || return 1
}

# Prints a summary of the environment variables that are relevant to simulation
print_sim_setup() {
    printf '%-32s %s\n' 'Project root:' "${proj_root}"
    printf '%-32s %s\n' 'Macros:' "${macros_dir}"
    printf '%-32s %s\n' 'Baseline source:' "${baseline_src_dir}"
    printf '%-32s %s\n' 'User core source:' "${user_src_dir}"
    printf '%-32s %s\n' 'Simulations:' "${sim_dir}"
    printf '%-32s %s\n' 'Bus-functional models:' "${bfm_dir}"
    printf '%-32s %s\n' 'MODELSIM' "${MODELSIM}"
    printf '%-32s %s\n' 'Xilinx simulation libraries:' "${XILINX_SIMLIB_DIR}"
    printf '\n'
}

if ! check_modelsim; then
    err "Could not find ModelSim tools in current PATH"
    return 1
fi

# Should be set by the users environment
tools_dir="${TOOLS_ROOT:-"/tools"}"

# Constant locations for source code
proj_root="$(readlink -f ../../)"

macros_dir="${proj_root}/macros"
baseline_src_dir="${proj_root}/src/baseline"
user_src_dir="${proj_root}/src/user"
sim_dir="${proj_root}/sim"
bfm_dir="${sim_dir}/BFM"

# Establish Xilinx simulation library locations and export the appropriate
# enviornment variable so that the modelsim.ini file can find things like the
# UNISIM and XPM libraries
questa_version="22.2"
sim_version="questa_fe"
vivado_version="2024.1"

# If the caller never set this, we craft it ourself based on the tool versions
# we defined earlier
if [[ -z "${XILINX_SIMLIB_DIR+set}" ]]; then
    XILINX_SIMLIB_DIR="${tools_dir}/lib/${vivado_version}/${sim_version}/${questa_version}"
fi
# Could get a bit more granular and verify that the libraries we want to
# compile against actually exist here
if [[ ! -d "${XILINX_SIMLIB_DIR}" ]]; then
    err "Directory ${XILINX_SIMLIB_DIR} does not exist"
    return 1
fi

# Location of Xilinx wrapper code (e.g., FIFO_SYNC_MACRO replacements)
if [[ ! -d "${macros_dir}" ]]; then
    err "Macros directory ${macros_dir} does not exist."
    return 1
fi

# Assume that all simulations will use the same modelsim.ini file. If a
# simulation needs to override settings in this one, it can create its own
# locally and then just override this setting.
MODELSIM="$(readlink -f ../modelsim.ini)"
if [[ ! -f "${MODELSIM}" ]]; then
    err "Could not locate modelsim.ini file"
    return 1
fi

export XILINX_SIMLIB_DIR
export MODELSIM

