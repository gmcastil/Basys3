#!/bin/bash

# Runs a simulation of the RXD serial input and the read interface of the UART.
#
# The `uart_rx_tb` testbench sends an arbitrary binary file into the RXD port of
# the UART, reads from the appropriate interface and then captures the received
# data as a binary file that can be diffed with what was sent in.

# Import common functions
if ! source "../common/common.sh" >/dev/null 2>&1; then
    printf '%s\n' "Error: Could not import common functions" >&2
    exit 1
fi

if ! check_modelsim; then
    err "Could not find ModelSim tools in current PATH"
    exit 1
fi

# Need to specify the simulator and version
questa_version="22.2"
sim_version="questa_fe_${questa_version}"

ip_dir="../.."
rtl_dir="../rtl"
tb_dir="./"

# Work directory
work="work"

# Exit on errors while we're compiling
set -e

# Remove existing ModelSim work library
if [[ -d "${work}" ]]; then
    rm -rf "${work}"
fi

vlib "${work}"
vmap work "${work}"

# Packages need to be compiled in before the rest of the testbench
vlog -work "${work}" -sv "${tb_dir}/uart_pkg.sv"

# Compile DUT
vcom -lint -work "${work}" -2008 "${ip_dir}/common/fifo_sync.vhd"

vcom -lint -work "${work}" -2008 "${rtl_dir}/skid_buffer.vhd"
vcom -lint -work "${work}" -2008 "${rtl_dir}/baud_rate_gen.vhd"
vcom -lint -work "${work}" -2008 "${rtl_dir}/uart_rx.vhd"
vcom -lint -work "${work}" -2008 "${rtl_dir}/uart_tx.vhd"
vcom -lint -work "${work}" -2008 "${rtl_dir}/uart.vhd"

vlog -work "${work}" -sv "${tb_dir}/data_capture.sv"

# Several captures modes are supported (all after reset):
#   0 - Never assert ready
#   1 - Always assert ready
#   2 - Periodically assert
#   3 - Randomly assert ready
vlog -work "${work}" -sv -define CAPTURE_READY_MODE=3 "${tb_dir}/uart_rx_tb.sv"

# Done compiling, so turn this back on
set +e

#vsim -c \
#    -do "run_uart_rx_tb.do" \
#    -voptargs=+acc \
#    "${work}.uart_rx_tb"
#
